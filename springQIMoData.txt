1.1 SPRING是什么
Spring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 *IoC（Inverse Of Control：反转控制）和AOP（Aspect Oriented Programming：面向切面编程）为内核。
提供了展现层 SpringMVC 和持久层 Spring JDBCTemplate 以及业务层事务管理等众多的企业级应用技术 ，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业应用开源框架。
*1.3 SPRING的优势
1）方便解耦，简化开发
通过 Spring提供的 IoC容器，可以将对象间的依赖关系交由 Spring进行控制，避免硬编码所造成的过度耦合。 用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。
2）AOP编程的支持
通过 Spring的 AOP 功能，方便进行面向切面编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松实现。
3）声明式事务的支持
可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量。
4）方便程序的测试
可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。
5）方便集成各种优秀框架
Spring对各种优秀框架（Struts、 Mybatis、 Hibernate、 Hessian 、Quartz等） 的支持。
6） 降低 JavaEE API 的使用难度
Spring对 JavaEE API  （如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API的使用难度大为降低。
7）Java 源码是经典学习范例
Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java 设计模式灵活运用以及对 Java技术的高深 造诣。它的源代码无意是 Java 技术的最佳实践的范例。
Singleton 单例(默认的)
Bean的实例化个数：1个
Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例
Bean的生命周期：
     对象创建：当应用加载，创建容器时，对象就被创建了
     对象运行：只要容器在，对象一直活着
     对象销毁：当应用卸载，销毁容器时，对象就被销毁了
Prototype 多例的
Bean的实例化个数：多个
Bean的实例化时机：当调用getBean()方法时实例化Bean
     对象创建：当使用对象时，创建新的对象实例
     对象运行：只要对象在使用中，就一直活着
     对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了
Bean实例化三种方式
* 无参构造方法实例化
1）使用无参构造方法实例化
它会根据默认无参构造方法来创建类对象，如果bean中没有默认无参构造函数，将会创建失败
* 工厂静态方法实例化
工厂的静态方法返回Bean实例
* 工厂实例方法实例化
工厂的非静态方法返回Bean实例

怎么将IUserDao怎样注入到IUserService内部呢？
   构造方法
    set方法
注入数据的三种数据类型
    * 普通数据类型
     * 引用数据类型
    * 集合数据类型

第二章:
Driver url username password
@Component 用于类上实例化bean
@Service 用于service类实例化bean
@Controller 用于web层上实例化bean
@Repository 用于dao层上实例化bean
@Autowired 使用在字段上 根据类型依赖注入
@Qualifier 结合@Autowired使用用于根据名称进行依赖注入
@Resource 相当于@Autowired+@Qualifier结合使用,按照名称进行注入
@Value 注入普通属性
@Scope 标准bean的作用范围
@Configuration 指定他是spring配置类 创建容器时会从该类上加载
@ComonentScan 用于指定spring扫描的包
@Bean 标注该方法的返回值放到spring容器中
@Import 导入包
@RunWith (SpringJUnit4ClassRunner.class)
<context:component-scan>开启注解扫描
@RequestMapping
@ResponseBody 不进行视图渲染
<!--mvc的注解驱动-->
<mvc :annotation-driven/>
<tx:annotation-driven/>
<!--注解的组件扫描-->
<context:component-scan base-package="com.yyp"></context:component-scan>
<!--全局参数-->
<context-param>
<param-name>contextConfigLocation</param-name>
<param-value>classpath:applicationContext.xml</param -value>
</context-param>


<!--Spring的监听器-->
<listener>
<listener-class>
org.springframework.web.context.ContextLoaderListener
</listener -class>
</listener>

<!--spring前端控制器-->
    <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring_mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>






